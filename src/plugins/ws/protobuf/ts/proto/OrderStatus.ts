// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "proto/OrderStatus.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message OrderStatus
 */
export interface OrderStatus {
    /**
     * @generated from protobuf field: repeated OrderStatus.Body orderStatus = 1;
     */
    orderStatus: OrderStatus_Body[];
}
/**
 * @generated from protobuf message OrderStatus.Body
 */
export interface OrderStatus_Body {
    /**
     * @generated from protobuf field: sint64 orderId = 1;
     */
    orderId: string;
    /**
     * @generated from protobuf field: string orderStatus = 2;
     */
    orderStatus: string;
    /**
     * @generated from protobuf field: string nextStatus = 3;
     */
    nextStatus: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class OrderStatus$Type extends MessageType<OrderStatus> {
    constructor() {
        super("OrderStatus", [
            { no: 1, name: "orderStatus", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OrderStatus_Body }
        ]);
    }
    create(value?: PartialMessage<OrderStatus>): OrderStatus {
        const message = { orderStatus: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderStatus): OrderStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated OrderStatus.Body orderStatus */ 1:
                    message.orderStatus.push(OrderStatus_Body.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated OrderStatus.Body orderStatus = 1; */
        for (let i = 0; i < message.orderStatus.length; i++)
            OrderStatus_Body.internalBinaryWrite(message.orderStatus[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderStatus
 */
export const OrderStatus = new OrderStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderStatus_Body$Type extends MessageType<OrderStatus_Body> {
    constructor() {
        super("OrderStatus.Body", [
            { no: 1, name: "orderId", kind: "scalar", T: 18 /*ScalarType.SINT64*/ },
            { no: 2, name: "orderStatus", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "nextStatus", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderStatus_Body>): OrderStatus_Body {
        const message = { orderId: "0", orderStatus: "", nextStatus: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderStatus_Body>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderStatus_Body): OrderStatus_Body {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sint64 orderId */ 1:
                    message.orderId = reader.sint64().toString();
                    break;
                case /* string orderStatus */ 2:
                    message.orderStatus = reader.string();
                    break;
                case /* string nextStatus */ 3:
                    message.nextStatus = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderStatus_Body, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sint64 orderId = 1; */
        if (message.orderId !== "0")
            writer.tag(1, WireType.Varint).sint64(message.orderId);
        /* string orderStatus = 2; */
        if (message.orderStatus !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.orderStatus);
        /* string nextStatus = 3; */
        if (message.nextStatus !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nextStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OrderStatus.Body
 */
export const OrderStatus_Body = new OrderStatus_Body$Type();
