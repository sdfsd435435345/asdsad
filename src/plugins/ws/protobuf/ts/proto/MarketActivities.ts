// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "proto/MarketActivities.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * 行情异动
 *
 * @generated from protobuf message MarketActivities
 */
export interface MarketActivities {
    /**
     * 触发时间
     *
     * @generated from protobuf field: sint64 createdTime = 1;
     */
    createdTime: string;
    /**
     * 价格
     *
     * @generated from protobuf field: string price = 2;
     */
    price: string;
    /**
     * 变量值
     *
     * @generated from protobuf field: string value = 3;
     */
    value: string;
    /**
     * 异动记录 id
     *
     * @generated from protobuf field: string marketActivitiesLogId = 4;
     */
    marketActivitiesLogId: string;
    /**
     * 交易对标识
     *
     * @generated from protobuf field: string symbolWassName = 5;
     */
    symbolWassName: string;
    /**
     * 标的币
     *
     * @generated from protobuf field: string base = 6;
     */
    base: string;
    /**
     * 计价币
     *
     * @generated from protobuf field: string quote = 7;
     */
    quote: string;
    /**
     * 涨跌色 1 涨 2 跌
     *
     * @generated from protobuf field: int32 colorType = 8;
     */
    colorType: number;
    /**
     * 中文标题
     *
     * @generated from protobuf field: string title_zh = 9;
     */
    titleZh: string;
    /**
     * 英文标题
     *
     * @generated from protobuf field: string title_en = 10;
     */
    titleEn: string;
    /**
     * 异动唯一标识
     *
     * @generated from protobuf field: string key = 11;
     */
    key: string;
    /**
     * 交易对名字
     *
     * @generated from protobuf field: string symbolName = 12;
     */
    symbolName: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class MarketActivities$Type extends MessageType<MarketActivities> {
    constructor() {
        super("MarketActivities", [
            { no: 1, name: "createdTime", kind: "scalar", T: 18 /*ScalarType.SINT64*/ },
            { no: 2, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "marketActivitiesLogId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "symbolWassName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "base", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "quote", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "colorType", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "title_zh", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "title_en", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "symbolName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MarketActivities>): MarketActivities {
        const message = { createdTime: "0", price: "", value: "", marketActivitiesLogId: "", symbolWassName: "", base: "", quote: "", colorType: 0, titleZh: "", titleEn: "", key: "", symbolName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarketActivities>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarketActivities): MarketActivities {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sint64 createdTime */ 1:
                    message.createdTime = reader.sint64().toString();
                    break;
                case /* string price */ 2:
                    message.price = reader.string();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                case /* string marketActivitiesLogId */ 4:
                    message.marketActivitiesLogId = reader.string();
                    break;
                case /* string symbolWassName */ 5:
                    message.symbolWassName = reader.string();
                    break;
                case /* string base */ 6:
                    message.base = reader.string();
                    break;
                case /* string quote */ 7:
                    message.quote = reader.string();
                    break;
                case /* int32 colorType */ 8:
                    message.colorType = reader.int32();
                    break;
                case /* string title_zh */ 9:
                    message.titleZh = reader.string();
                    break;
                case /* string title_en */ 10:
                    message.titleEn = reader.string();
                    break;
                case /* string key */ 11:
                    message.key = reader.string();
                    break;
                case /* string symbolName */ 12:
                    message.symbolName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarketActivities, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sint64 createdTime = 1; */
        if (message.createdTime !== "0")
            writer.tag(1, WireType.Varint).sint64(message.createdTime);
        /* string price = 2; */
        if (message.price !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.price);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* string marketActivitiesLogId = 4; */
        if (message.marketActivitiesLogId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.marketActivitiesLogId);
        /* string symbolWassName = 5; */
        if (message.symbolWassName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.symbolWassName);
        /* string base = 6; */
        if (message.base !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.base);
        /* string quote = 7; */
        if (message.quote !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.quote);
        /* int32 colorType = 8; */
        if (message.colorType !== 0)
            writer.tag(8, WireType.Varint).int32(message.colorType);
        /* string title_zh = 9; */
        if (message.titleZh !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.titleZh);
        /* string title_en = 10; */
        if (message.titleEn !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.titleEn);
        /* string key = 11; */
        if (message.key !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.key);
        /* string symbolName = 12; */
        if (message.symbolName !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.symbolName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MarketActivities
 */
export const MarketActivities = new MarketActivities$Type();
